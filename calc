#!/bin/bash 

#NOTE: No script vars may be in [a-z]+.  That's the user namespace

PROMPT='> '
FMT='%.12g'

function help {
cat << END_HERE
calc : script that uses awk's math facilities to make a bc that doesn't suck

Commands:
    quit, q    : exits program
    help, h, ? : displays this help screen
    EXPR       : Evaluates EXPR using awk "BEGIN{print EXPR)}"
    VAR=EXPR   : Evaluates EXPR and assigns the result to VAR
    format FMT : Changes output format specifier

Tokens:
    VAR <- [a-z]+
    EXPR <- anything awk accepts in that context.  Anything of the form
            \$VAR will be replaced by the value of VAR if it's been assigned.
            Commands may also be embedded in EXPR using backticks
    FMT <- awk printf format specifier

Example:
    > a=42
    42
    > b=log(\$a)
    3.73766961828
    > \$b+20
    23.7376696183
END_HERE
}

if [ 0 -ne $# ]; then
    help;
    exit 1
fi

#Don't display prompt unless stdin is a terminal
if [ ! -t 0 ]; then
    PROMPT=''
fi

echo -n "$PROMPT"
#VARNAMES=()
while read LINE; do
    case "$LINE" in
        "quit" | "q" )
            exit 0;;
        "help" | "h" | "?" )
            help;;
        format* )
            FMT=`echo $LINE | sed 's/^format //'` ;;
        * )
            if echo "$LINE" | grep -Eq '^ *[a-z]+ *='; then
                VAR=`echo "$LINE" | sed -r 's/^ *([a-z]+) *=.*$/\1/'`
                EXPR=`echo "$LINE" | sed -r 's/^ *[a-z]+ *= *(.*)$/\1/'`
#               VARNAMES=(${VARNAMES[@]} $VAR)
                #Keep full precision for variables.
                eval $VAR=`eval awk "\"BEGIN{OFMT=\\\\\"%.24f\\\\\"; print $EXPR}\""`
                LINE=\$$VAR
            fi #fallthrough and print value

            #The inner quotes keep it from splitting up awk's arg during
            #the eval stage.  The indirection makes variables in $line
            #get evaluated
            eval awk "\"BEGIN{OFMT=\\\"$FMT\\\"; print($LINE)}\""
        ;;
    esac
    echo -n "$PROMPT"
done

